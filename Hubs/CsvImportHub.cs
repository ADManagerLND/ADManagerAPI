using System.Collections.Concurrent;
using System.Text.Json;
using ADManagerAPI.Models;
using ADManagerAPI.Services.Interfaces;
using ADManagerAPI.Utils;
using Microsoft.AspNetCore.SignalR;

namespace ADManagerAPI.Hubs;

public class CsvImportHub : Hub
{
    private static readonly ConcurrentDictionary<string, List<LegacyImportActionItem>> _analysisActions = new();
    private static readonly ConcurrentDictionary<string, List<Dictionary<string, string>>> _fileData = new();
    private readonly IConfigService _configService;
    private readonly ILogger<CsvImportHub> _logger;
    private readonly ISignalRService _signalRService;
    private readonly ISpreadsheetImportService _spreadsheetImportService;

    public CsvImportHub(
        ILogger<CsvImportHub> logger,
        ISpreadsheetImportService spreadsheetImportService,
        IConfigService configService,
        ISignalRService signalRService)
    {
        _logger = logger;
        _spreadsheetImportService = spreadsheetImportService;
        _configService = configService;
        _signalRService = signalRService;
    }

    public override async Task OnConnectedAsync()
    {
        _logger.LogInformation($"Client connect√© au CsvImportHub: {Context.ConnectionId}");
        await base.OnConnectedAsync();
    }

    public override async Task OnDisconnectedAsync(Exception? exception)
    {
        _logger.LogInformation($"Client d√©connect√© du CsvImportHub: {Context.ConnectionId}");

        _analysisActions.TryRemove(Context.ConnectionId, out _);
        _fileData.TryRemove(Context.ConnectionId, out _);
        FileDataStore.ClearAllData(Context.ConnectionId);

        AnalysisDataStore.ClearAnalysis(Context.ConnectionId);
        _logger.LogInformation($"[OnDisconnectedAsync] Donn√©es nettoy√©es pour ConnectionId: {Context.ConnectionId}");

        await base.OnDisconnectedAsync(exception);
    }

    /// <summary>
    /// Parser un fichier brut avec la configuration appropri√©e (incluant manualColumns)
    /// </summary>
    private async Task<List<Dictionary<string, string>>?> ParseFileWithConfig(byte[] fileBytes, string fileName, ImportConfig config)
    {
        try
        {
            _logger.LogInformation($"üîß Parsing de {fileName} avec config - ManualColumns: [{string.Join(", ", config.ManualColumns ?? new List<string>())}]");
            
            using var stream = new MemoryStream(fileBytes);
            var extension = Path.GetExtension(fileName).ToLowerInvariant();
            
            // Obtenir le bon parser
            var allParsers = Context.GetHttpContext()!.RequestServices.GetServices<ADManagerAPI.Services.Parse.ISpreadsheetDataParser>();
            var parser = allParsers.FirstOrDefault(p => p.CanHandle(extension));
            
            if (parser == null)
            {
                _logger.LogError($"Aucun parser trouv√© pour {extension}");
                return null;
            }

            // üîß CORRECTION: Parser avec les bonnes manualColumns !
            var data = await parser.ParseAsync(stream, fileName, config.CsvDelimiter, config.ManualColumns);
            var columnNames = data.FirstOrDefault()?.Keys.ToList() ?? new List<string>();
            _logger.LogInformation($"‚úÖ Parsing r√©ussi: {data.Count} lignes, colonnes: [{string.Join(", ", columnNames)}]");
            
            return data;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Erreur lors du parsing de {fileName}");
            return null;
        }
    }


    public async Task StartAnalysis(string configId, ImportConfig? customConfig = null, List<string>? disabledActionTypes = null)
    {
        _logger.LogInformation(
            $"üöÄüöÄüöÄ StartAnalysis appel√© par le client {Context.ConnectionId} avec configId: {configId}");
        
        _logger.LogInformation(
            $"üîß STEP 0: METHODE APPELEE ! param√®tres re√ßus - configId: '{configId}', customConfig: {(customConfig != null ? "OUI" : "NON")}, disabledActionTypes: {(disabledActionTypes?.Any() == true ? $"[{string.Join(", ", disabledActionTypes)}]" : "null/vide")}");
        
        if (customConfig != null)
        {
            _logger.LogInformation(
                $"üîß CustomConfig.DisabledActionTypes: {(customConfig.DisabledActionTypes?.Any() == true ? string.Join(", ", customConfig.DisabledActionTypes) : "aucun")}");
            try 
            {
                var customConfigJson = System.Text.Json.JsonSerializer.Serialize(customConfig, new JsonSerializerOptions { WriteIndented = false });
                _logger.LogInformation($"üîß CustomConfig JSON: {customConfigJson}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"üîß Erreur s√©rialisation CustomConfig: {ex.Message}");
            }
        }

        // üîç LOGS D√âTAILL√âS pour debug
        _logger.LogInformation($"üîç STEP 1: V√©rification annulation connexion - IsCancellationRequested: {Context.ConnectionAborted.IsCancellationRequested}");
        
        try
        {
            _logger.LogInformation($"üîç STEP 2: Envoi progression 10%");

        // S'assurer que la connexion est toujours active
        if (Context.ConnectionAborted.IsCancellationRequested)
        {
            _logger.LogWarning($"StartAnalysis: Connexion {Context.ConnectionId} a √©t√© annul√©e");
            return;
        }

            await _signalRService.SendCsvAnalysisProgressAsync(Context.ConnectionId, 10, "analyzing",
                "Analyse des donn√©es du fichier...");
            _logger.LogInformation($"üîç STEP 3: Progression 10% envoy√©e");

            // üîß CORRECTION: D√©terminer d'abord la configuration
            _logger.LogInformation($"üîç STEP 4: D√©termination de la configuration");
            ImportConfig config;
            
            // ‚úÖ CORRECTION : Priorit√© √† la configuration personnalis√©e (avec disabledActionTypes)
            if (customConfig != null)
            {
                _logger.LogInformation($"üîß Utilisation de la configuration personnalis√©e avec {customConfig.DisabledActionTypes?.Count ?? 0} types d'actions d√©sactiv√©es");
                _logger.LogInformation($"üîç STEP 5A: Configuration personnalis√©e s√©lectionn√©e");
                config = customConfig;
            }
            else if (string.IsNullOrEmpty(configId))
            {
                _logger.LogWarning(
                    "Aucun ID de configuration fourni pour l'analyse, utilisation d'une configuration par d√©faut");
                _logger.LogInformation($"üîç STEP 5B: Configuration par d√©faut utilis√©e");
                config = new ImportConfig
                {
                    DefaultOU = "DC=domain,DC=local",
                    CsvDelimiter = ';'
                };
            }
            else
            {
                _logger.LogInformation($"üîç STEP 5C: Chargement de la configuration {configId}");
                var savedConfigs = await _configService.GetSavedImportConfigs();
                _logger.LogInformation($"üîç STEP 5C.1: {savedConfigs.Count} configurations charg√©es");
                var importConfig = savedConfigs.FirstOrDefault(c => c.Id == configId);
                if (importConfig == null)
                {
                    _logger.LogWarning($"Configuration {configId} non trouv√©e pour l'analyse");
                    await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId,
                        $"Configuration {configId} non trouv√©e");
                    return;
                }

                _logger.LogInformation($"üîç STEP 5C.2: Configuration {configId} trouv√©e");
                config = importConfig.ConfigData;
                
                // ‚úÖ FALLBACK : Si la config de base n'a pas de disabledActionTypes mais qu'on en a re√ßu en param√®tre
                if ((config.DisabledActionTypes == null || !config.DisabledActionTypes.Any()) 
                    && disabledActionTypes != null && disabledActionTypes.Any())
                {
                    _logger.LogInformation($"üîß Application des DisabledActionTypes du param√®tre √† la config de base: {string.Join(", ", disabledActionTypes)}");
                    config.DisabledActionTypes = disabledActionTypes
                        .Select(s => Enum.TryParse<ActionType>(s, true, out var actionType) ? (ActionType?)actionType : null)
                        .Where(a => a.HasValue)
                        .Select(a => a.Value)
                        .ToList();
                }
            }

            // üîß CORRECTION: Maintenant qu'on a la config, v√©rifier et parser les donn√©es si n√©cessaire
            _logger.LogInformation($"üîç STEP 6: V√©rification des donn√©es pars√©es");
            var spreadsheetData = FileDataStore.GetCsvData(Context.ConnectionId);
            _logger.LogInformation($"üîç STEP 6.1: Donn√©es CSV existantes: {(spreadsheetData?.Count ?? 0)} lignes");
            
            // Si pas de donn√©es pars√©es, parser le fichier brut avec la bonne configuration
            if (spreadsheetData == null || spreadsheetData.Count == 0)
            {
                var rawFileData = FileDataStore.GetRawFileData(Context.ConnectionId);
                if (rawFileData == null)
                {
                    _logger.LogWarning("Aucune donn√©e de fichier trouv√©e (ni pars√©e ni brute)");
                    await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId,
                        "Aucune donn√©e de fichier trouv√©e. Veuillez d'abord uploader un fichier.");
                    return;
                }

                // Parser le fichier brut avec la configuration appropri√©e
                _logger.LogInformation($"üîß Parsing du fichier brut avec la configuration pour connexion {Context.ConnectionId}");
                
                var fileName = rawFileData["fileName"] as string;
                var fileBytes = rawFileData["fileBytes"] as byte[];
                var extension = rawFileData["extension"] as string;
                
                if (fileBytes == null || string.IsNullOrEmpty(fileName))
                {
                    _logger.LogError("Donn√©es de fichier brut invalides");
                    await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId,
                        "Donn√©es de fichier invalides.");
                    return;
                }

                // Parser le fichier avec la bonne configuration
                spreadsheetData = await ParseFileWithConfig(fileBytes, fileName, config);
                
                if (spreadsheetData == null || spreadsheetData.Count == 0)
                {
                    _logger.LogError("Erreur lors du parsing avec configuration");
                    await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId,
                        "Impossible de parser le fichier avec la configuration fournie.");
                    return;
                }

                // Stocker les donn√©es pars√©es pour usage ult√©rieur
                FileDataStore.SetCsvData(spreadsheetData, Context.ConnectionId);
            }

            _logger.LogInformation(
                $"Donn√©es de fichier trouv√©es et associ√©es √† la connexion {Context.ConnectionId}: {spreadsheetData.Count} lignes");

            _logger.LogInformation($"üîç STEP 7: Envoi progression 30% et d√©marrage analyse");
            await _signalRService.SendCsvAnalysisProgressAsync(Context.ConnectionId, 30, "analyzing",
                "Analyse des colonnes et validation des donn√©es...");

            _logger.LogInformation($"üîç STEP 8: Appel AnalyzeSpreadsheetDataAsync avec {spreadsheetData.Count} lignes");
            var result = await _spreadsheetImportService.AnalyzeSpreadsheetDataAsync(spreadsheetData, config,
                Context.ConnectionId, Context.ConnectionAborted);
            _logger.LogInformation($"üîç STEP 9: AnalyzeSpreadsheetDataAsync termin√© - Success: {result.Success}");

            _logger.LogInformation(
                $"[StartAnalysis_HUB_LOG] Post-AnalyzeSpreadsheetDataAsync. ConnectionId: {Context.ConnectionId}. AnalysisResult.Success: {result.Success}. result.Analysis is null: {result.Analysis == null}. Actions if not null: {result.Analysis?.Actions?.Count ?? -1}. ErrorMessage: {result.ErrorMessage}");

            if (result.Success)
            {
                _logger.LogInformation($"[StartAnalysis_HUB_LOG] === ANALYSE R√âUSSIE POUR {Context.ConnectionId} ===");

                _logger.LogInformation(
                    $"[StartAnalysis_HUB_LOG] Analysis was successful. ConnectionId: {Context.ConnectionId}. Storing result.Analysis into AnalysisDataStore.");

                // Stocker l'analyse avec le connectionId
                AnalysisDataStore.SetAnalysis(Context.ConnectionId, result.Analysis);

                // V√©rification imm√©diate
                var storedAnalysis = AnalysisDataStore.GetAnalysis(Context.ConnectionId);
                _logger.LogInformation(
                    $"[StartAnalysis_HUB_LOG] ‚úÖ Analyse stock√©e pour ConnectionId: {Context.ConnectionId}. Analysis in DataStore is null: {storedAnalysis == null}. Actions if not null: {storedAnalysis?.Actions?.Count ?? -1}");

                // Mettre √† jour _analysisActions pour l'interface utilisateur, seulement si des actions concr√®tes existent.
                if (result.Analysis?.Actions != null && result.Analysis.Actions.Any())
                {
                    var actionItems = result.Analysis.Actions.Select(a => new LegacyImportActionItem
                    {
                        RowIndex = 0,
                        ActionType = a.ActionType.ToString(),
                        Data = new Dictionary<string, string>
                        {
                            ["objectName"] = a.ObjectName,
                            ["path"] = a.Path,
                            ["message"] = a.Message
                        },
                        IsValid = true
                    }).ToList();

                    _analysisActions[Context.ConnectionId] = actionItems;
                    _logger.LogInformation(
                        $"[StartAnalysis] UI actions (_analysisActions) updated for ConnectionId {Context.ConnectionId}: {actionItems.Count} actions.");
                }
                else
                {
                    // Aucune action de la nouvelle analyse, ou result.Analysis est null.
                    // Nettoyer les actions pr√©c√©demment affich√©es pour cette connexion pour √©viter la confusion √† l'UI.
                    _analysisActions.TryRemove(Context.ConnectionId, out _);
                    _logger.LogInformation(
                        $"[StartAnalysis] No actions in result.Analysis or result.Analysis is null. UI actions (_analysisActions) cleared for ConnectionId {Context.ConnectionId}. result.Analysis.Actions was null: {result.Analysis?.Actions == null}, or empty: {!result.Analysis?.Actions?.Any() ?? true}");
                }

                await _signalRService.SendCsvAnalysisCompleteAsync(Context.ConnectionId, result);
            }
            else
            {
                await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId,
                    result.ErrorMessage ?? "Erreur lors de l'analyse des donn√©es du fichier");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erreur lors de l'analyse des donn√©es du fichier");

            // V√©rifier si la connexion est toujours active avant d'envoyer l'erreur
            if (!Context.ConnectionAborted.IsCancellationRequested)
                await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId,
                    $"Erreur lors de l'analyse des donn√©es du fichier: {ex.Message}");
            else
                _logger.LogWarning(
                    $"StartAnalysis: Impossible d'envoyer l'erreur, connexion {Context.ConnectionId} ferm√©e");
        }
    }

    public async Task StartImport(ImportOperationData importData)
    {
        _logger.LogInformation($"StartImport appel√© par le client {Context.ConnectionId}");

        // S'assurer que la connexion est toujours active
        if (Context.ConnectionAborted.IsCancellationRequested)
        {
            _logger.LogWarning($"StartImport: Connexion {Context.ConnectionId} a √©t√© annul√©e");
            return;
        }

        if (importData == null)
        {
            _logger.LogWarning("Donn√©es d'import non fournies");
            await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId, "Donn√©es d'import non fournies");
            return;
        }

        if (string.IsNullOrEmpty(importData.ConfigId))
        {
            _logger.LogWarning("ID de configuration non fourni");
            await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId, "ID de configuration non fourni");
            return;
        }

        var spreadsheetData = FileDataStore.GetCsvData(Context.ConnectionId);

        if (spreadsheetData == null || spreadsheetData.Count == 0)
        {
            _logger.LogWarning("Aucune donn√©e de fichier trouv√©e pour l'import");
            await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId,
                "Aucune donn√©e de fichier trouv√©e pour l'import. Veuillez d'abord uploader un fichier.");
            return;
        }

        ImportConfig importConfig;
        try
        {
            var savedConfigs = await _configService.GetSavedImportConfigs();
            var configEntry = savedConfigs.FirstOrDefault(c => c.Id == importData.ConfigId);
            if (configEntry == null)
            {
                _logger.LogWarning($"Configuration {importData.ConfigId} non trouv√©e pour l'import");
                await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId,
                    $"Configuration {importData.ConfigId} non trouv√©e");
                return;
            }

            importConfig = configEntry.ConfigData;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erreur lors de la r√©cup√©ration de la configuration pour l'import");
            await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId,
                $"Erreur lors de la r√©cup√©ration de la configuration: {ex.Message}");
            return;
        }

        try
        {
            await _signalRService.SendCsvAnalysisProgressAsync(Context.ConnectionId, 10, "importing",
                "D√©but de l'import...");

            ImportResult result;

            if (importData.Actions != null && importData.Actions.Any())
            {
                var selectedActions = importData.Actions.Where(a => a.IsValid).ToList();
                _logger.LogInformation(
                    $"Utilisation des actions fournies par le client: {selectedActions.Count} actions s√©lectionn√©es sur {importData.Actions.Count} fournies.");

                if (selectedActions.Count == 0)
                {
                    _logger.LogWarning("Aucune action s√©lectionn√©e pour l'import");
                    await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId,
                        "Aucune action s√©lectionn√©e. Veuillez s√©lectionner au moins une action √† ex√©cuter.");
                    return;
                }

                await _signalRService.SendCsvAnalysisProgressAsync(Context.ConnectionId, 20, "importing",
                    $"Ex√©cution de {selectedActions.Count} actions...");
                result = await _spreadsheetImportService.ExecuteImportFromActionsAsync(spreadsheetData, importConfig,
                    selectedActions, Context.ConnectionId);
            }
            else
            {
                _logger.LogInformation(
                    $"[StartImport] No client actions provided. ConnectionId: {Context.ConnectionId}. Attempting to use analysis from AnalysisDataStore.");

                AnalysisDataStore.LogCurrentState();
                _logger.LogInformation(
                    $"[StartImport] Tentative de r√©cup√©ration de l'analyse pour ConnectionId: {Context.ConnectionId}");

                var analysisToExecute = AnalysisDataStore.GetAnalysis(Context.ConnectionId);

                // Fallback vers la m√©thode legacy si aucune analyse trouv√©e avec connectionId
                if (analysisToExecute == null)
                {
                    _logger.LogWarning(
                        $"[StartImport] Aucune analyse trouv√©e pour ConnectionId {Context.ConnectionId}, tentative avec m√©thode legacy");
                    analysisToExecute = AnalysisDataStore.GetLatestAnalysis();
                    if (analysisToExecute != null)
                        _logger.LogInformation(
                            $"[StartImport] Analyse trouv√©e via m√©thode legacy avec {analysisToExecute.Actions?.Count ?? 0} actions");
                }

                if (analysisToExecute != null && analysisToExecute.Actions != null && analysisToExecute.Actions.Any())
                {
                    _logger.LogInformation(
                        $"[StartImport] Using analysis from AnalysisDataStore for ConnectionId {Context.ConnectionId}. It has {analysisToExecute.Actions.Count} actions. Executing import...");
                    await _signalRService.SendCsvAnalysisProgressAsync(Context.ConnectionId, 20, "importing",
                        $"Ex√©cution de {analysisToExecute.Actions.Count} actions √† partir de la derni√®re analyse stock√©e...");
                    result = await _spreadsheetImportService.ExecuteImportFromAnalysisAsync(analysisToExecute,
                        importConfig, Context.ConnectionId);
                }
                else
                {
                    var reason = "Raison inconnue";
                    if (analysisToExecute == null) reason = "Analysis from AnalysisDataStore is null";
                    else if (analysisToExecute.Actions == null)
                        reason = "AnalysisDataStore.GetLatestAnalysis().Actions is null";
                    else if (!analysisToExecute.Actions.Any())
                        reason = "AnalysisDataStore.GetLatestAnalysis().Actions is empty";

                    _logger.LogWarning(
                        $"[StartImport] Cannot proceed with import using analysis from AnalysisDataStore for ConnectionId {Context.ConnectionId}. Reason: {reason}. Retrieved analysis is null: {analysisToExecute == null}. Actions count if not null: {analysisToExecute?.Actions?.Count ?? -1}");
                    await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId,
                        $"Aucune analyse pr√©alable avec des actions ex√©cutables n'a √©t√© trouv√©e (Raison: {reason}). Veuillez d'abord analyser le fichier.");
                    result = new ImportResult
                    {
                        Success = false,
                        Message =
                            $"Aucune analyse stock√©e avec des actions ex√©cutables disponible (Raison: {reason}). StartAnalysis doit √™tre appel√© en premier.",
                        TotalActions = 1,
                        ErrorCount = 1,
                        Results = new List<ImportActionResult>
                        {
                            new()
                            {
                                Success = false,
                                ActionType = ActionType.ERROR,
                                ObjectName = "Import",
                                Path = "",
                                Message = $"Aucune analyse pr√©alable disponible: {reason}"
                            }
                        }
                    };
                }
            }

            _logger.LogInformation(
                $"[StartImport] Import termin√© for ConnectionId {Context.ConnectionId}. Succ√®s: {result.Success}, R√©ussis: {result.TotalSucceeded}, √âchecs: {result.TotalFailed}, D√©tails: {result.Details}");
            await _signalRService.SendCsvImportCompleteAsync(Context.ConnectionId, result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erreur lors de l'ex√©cution de l'import");

            // V√©rifier si la connexion est toujours active avant d'envoyer l'erreur
            if (!Context.ConnectionAborted.IsCancellationRequested)
                await _signalRService.SendCsvAnalysisErrorAsync(Context.ConnectionId,
                    $"Erreur lors de l'ex√©cution de l'import: {ex.Message}");
            else
                _logger.LogWarning(
                    $"StartImport: Impossible d'envoyer l'erreur, connexion {Context.ConnectionId} ferm√©e");
        }
    }
}

public class ImportOperationData
{
    public string ConfigId { get; set; }
    public List<LegacyImportActionItem> Actions { get; set; }
}